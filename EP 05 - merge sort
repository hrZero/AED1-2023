#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void Merge (int p, int q, int r, int a[]);
void MergeSort (int p, int r, int a[]);

int main() {
  int n, *arr;
  double time_spent = 0.0;

  //Generate random in each execution
  srand (time(NULL));
  printf ("Insert the array lenght: ");
  scanf ("%d", &n);
  arr = (int*) malloc (n * sizeof(int));

  //Fill the array randomly with numbers from [1, 1000]
  for (int i = 0; i < n; i++) 
    arr[i] = rand() % 1000;

  //Begins to count the execution time
  clock_t begin = clock();
  MergeSort (0, n, arr);
  //Stops to count the execution time
  clock_t end = clock();
  
  //Transform the spent time in seconds
  time_spent += (double)(end - begin) / CLOCKS_PER_SEC;

  //Prints the time in ms
  printf ("Execution time: %.3lf ms\n", time_spent*1000);
  
  return 0;
}

void Merge (int p, int q, int r, int a[]) {
  int i = p, j = q, k = 0, *w;

  w = (int*) malloc ((r-p) * sizeof(int));
  
  while (i < q && j < r) {
    if (a[i] <= a[j])
      w[k++] = a[i++];
    else
      w[k++] = a[j++];
  }
  while (i < q)
    w[k++] = a[i++];
  while (j < r)
    w[k++] = a[j++];
  for (i = p; i < r; i++)
    a[i] = w[i-p];
  free (w);
}

void MergeSort (int p, int r, int a[]) {
  if (p < r-1) {
    int q = (p+r) / 2;
    MergeSort (p, q, a);
    MergeSort (q, r, a);
    Merge (p, q, r, a);
  }
}
