#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void HeapSort (int n, int a[]);
void Swap (int* a, int* b);
void Heapify (int n, int i, int a[]);

int main() {
  int n, *arr;
  double time_spent = 0.0;

  //Generate random in each execution
  srand (time(NULL));
  printf ("Insert the array lenght: ");
  scanf ("%d", &n);
  arr = (int*) malloc (n * sizeof(int));

  //Fill the array randomly with numbers from [1, 1000]
  for (int i = 0; i < n; i++) 
    arr[i] = rand() % 1000;

  //Begins to count the execution time
  clock_t begin = clock();
  HeapSort (n, arr);
  //Stops to count the execution time
  clock_t end = clock();
  
  //Transform the spent time in seconds
  time_spent += (double)(end - begin) / CLOCKS_PER_SEC;

  //Prints the time in ms
  printf ("Execution time: %.3lf ms\n", time_spent*1000);
  
  return 0;
}

void HeapSort (int n, int a[]) {
  for (int i = n/2 - 1; i >= 0; i--)
    Heapify (n, i, a);
  for (int i = n-1; i >= 0; i--) {
    Swap (&a[0], &a[i]);
    Heapify(i, 0, a);
  }
}

void Swap (int* a, int* b) {
  int temp = *a;

  *a = *b;
  *b = temp;
}

void Heapify (int n, int i, int a[]) {
  int largest = i, left = 2*i + 1, right = 2*i + 2;
  
  if (left < n && a[left] > a[largest])
    largest = left;
  if (right < n && a[right] > a[largest])
     largest = right;
  if (largest != i) {
    Swap (&a[i], &a[largest]);
    Heapify (n, largest, a);
  }
}
