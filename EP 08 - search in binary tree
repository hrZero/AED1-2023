#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct treeNode {
    char letter;
    struct treeNode *left;
    struct treeNode *right;
} treeNode;

void Infix (treeNode *);
void Prefix (treeNode *);
void Postfix (treeNode *);
void ShowInfix (char *);
void ShowPrefix (char *);
void ShowPostfix (char *);
treeNode* Push (treeNode *, char );
_Bool Search (treeNode *, char );

char lettersInfix[100] = { 0 };
char lettersPostfix[100] = { 0 };
char lettersPrefix[100] = { 0 };
int i = 0;
int j = 0;
int k = 0;

int main() {
    char command[20], letter;
    treeNode* node = NULL;
    
    while (scanf ("%s%*c", command) != EOF) {
        if (strcmp (command, "I") == 0) {
			scanf ("%c", &letter);
			node = Push (node, letter);
		}
		
		else if (strcmp (command, "INFIX") == 0)
			Infix(node), ShowInfix (lettersInfix);
			
		else if (strcmp (command, "PREFIX") == 0)
			Prefix (node), ShowPrefix (lettersPrefix);
			
		else if (strcmp (command, "P") == 0) {
		    scanf ("%c", &letter);
			if (Search (node, letter))
				printf ("%c exist\n", letter);
			else
				printf ("%c dont exist\n", letter);
		}
		
		else
			Postfix (node), ShowPostfix (lettersPostfix);
    }

    return 0;
}

treeNode* Push (treeNode *node, char letter) {
	if (!node) {
		node = (treeNode *) malloc (sizeof(treeNode));
		node->letter = letter;
		node->right = node->left = NULL;
	}
	
	else if (node->letter > letter)
		node->left = Push (node->left, letter);
	else
		node->right = Push (node->right, letter);

	return node;
}

_Bool Search (treeNode *node, char letter) {
	_Bool right, left;

	if (!node)
		return 0;
	if (node->letter == letter)
		return 1;
	
	if (node->letter > letter)
		left = Search (node->left, letter);
	else
		right = Search (node->right, letter);
}

void ShowInfix (char *letters) {
	int z;
	
	for (z = 0; z < i; ++z) {
		if (!z)
			printf ("%c", lettersInfix[z]);
		else
			printf (" %c", lettersInfix[z]);
	}
	
	i = 0;
	printf ("\n");
}

void ShowPostfix (char *letters) {
	int z;
	
	for (z = 0; z < j; ++z) {
		if (!z)
			printf("%c", lettersPostfix[z]);
		else
			printf(" %c", lettersPostfix[z]);
	}
	
	j = 0;
	printf("\n");
}

void ShowPrefix (char *letters) {
	int z;
	
	for (z = 0; z < k; ++z) {
		if (!z)
			printf ("%c", lettersPrefix[z]);
		else
			printf (" %c", lettersPrefix[z]);
	}

	k = 0;
	printf("\n");

}

void Infix (treeNode *node) {
	if (node) {
		Infix (node->left);
		lettersInfix[i++] = node->letter;
		Infix (node->right);
	}
}

void Postfix (treeNode *node) {
	if (node)	{
		Postfix (node->left);
		Postfix (node->right);
		lettersPostfix[j++] = node->letter;
	}
}

void Prefix (treeNode *node) {
	if (node)	{
		lettersPrefix[k++] = node->letter;
		Prefix (node->left);
		Prefix (node->right);
	}
}
