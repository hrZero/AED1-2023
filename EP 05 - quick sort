#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void QuickSort (int low, int high, int a[]);
void Swap (int* a, int* b);
int Partition (int low, int high, int a[]);

int main() {
  int n, *arr;
  double time_spent = 0.0;

  //Generate random in each execution
  srand (time(NULL));
  printf ("Insert the array lenght: ");
  scanf ("%d", &n);
  arr = (int*) malloc (n * sizeof(int));

  //Fill the array randomly with numbers from [1, 1000]
  for (int i = 0; i < n; i++) 
    arr[i] = rand() % 1000;

  //Begins to count the execution time
  clock_t begin = clock();
  QuickSort (0, n-1, arr);
  //Stops to count the execution time
  clock_t end = clock();
  
  //Transform the spent time in seconds
  time_spent += (double)(end - begin) / CLOCKS_PER_SEC;

  //Prints the time in ms
  printf ("Execution time: %.3lf ms\n", time_spent*1000);
  
  return 0;
}

void QuickSort (int low, int high, int a[]) {
  if (low < high) {
    int pi = Partition (low, high, a);
    QuickSort (low, pi-1, a);
    QuickSort (pi+1, high, a);
  }
}

void Swap (int* a, int* b) {
  int temp = *a;

  *a = *b;
  *b = temp;
}

int Partition (int low, int high, int a[]) {
  int pivot = a[high], i = low-1;
 
  for (int j = low; j <= high-1; j++) {
    if (a[j] < pivot) {
      i++;
      Swap (&a[i], &a[j]);
    }
  }
  Swap (&a[i+1], &a[high]);
  
  return (i+1);
}
